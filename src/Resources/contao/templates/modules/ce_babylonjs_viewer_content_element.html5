<?php
if (TL_MODE == 'BE') {?>
    <?= $this->headline; ?>
    <div class="cte_type published">DC Babylonjs Viewer Module</div>
    <?php
}
if (TL_MODE != 'BE') {


    $GLOBALS['TL_HEAD'][] = '<script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>';
    $GLOBALS['TL_HEAD'][] = '<script src="https://cdn.jsdelivr.net/npm/babylonjs@5.14.0/babylon.js"></script>';
    $GLOBALS['TL_HEAD'][] = '<script src="https://cdn.jsdelivr.net/npm/babylonjs-loaders@5.14.0/babylonjs.loaders.min.js"></script>';
    $GLOBALS['TL_HEAD'][] = '<script src="https://cdn.jsdelivr.net/npm/babylonjs-gui@5.14.0/babylon.gui.min.js"></script>';
    $GLOBALS['TL_HEAD'][] = '<script src="bundles/contaobabylonjsviewer/js/duncrow-bjs-gui.js"></script>';
    $GLOBALS['TL_HEAD'][] = '<link rel="stylesheet" href="bundles/contaobabylonjsviewer/css/accordion-styles.css" />';
    $GLOBALS['TL_HEAD'][] = '<link rel="stylesheet" href="bundles/contaobabylonjsviewer/css/gui-styles.css" />';
    $GLOBALS['TL_HEAD'][] = '<link rel="stylesheet" href="bundles/contaobabylonjsviewer/css/viewer-styles.css" />';

    $settings = json_decode(html_entity_decode($this->dc_viewer_settings));
    $files = array_map('\StringUtil::binToUuid', deserialize($this->dc_viewer_settings_files, true));
    $filesMaterial = array_map('\StringUtil::binToUuid', deserialize($this->dc_viewer_settings_material_files, true));
    $filesAccordionSettings = array_map('\StringUtil::binToUuid', deserialize($this->dc_viewer_settings_accoridion_file, true));
    $filesGuiSettings = array_map('\StringUtil::binToUuid', deserialize($this->dc_viewer_settings_gui_file, true));
    $filesCameraSettings = array_map('\StringUtil::binToUuid', deserialize($this->dc_viewer_settings_camera, true));
    $filesEnvironmentSettings = array_map('\StringUtil::binToUuid', deserialize($this->dc_viewer_settings_environment, true));
    $filesMarkersSettings = array_map('\StringUtil::binToUuid', deserialize($this->dc_viewer_settings_markers_file, true));
    
     

    $objFile = [];
    $objFileAccordionSettings = [];
    $objFileGuiSettings = [];
    $objFileCameraSettings = [];
    $objFileEnvironmentSettings = [];
    $objFileMarkerJson = []; 
    // for($i = 0; $i < count($files); $i++){
    //     $objFile[] = [(\FilesModel::findByUuid($files[$i]))->path, (\FilesModel::findByUuid($files[$i]))->extension];
    // }
    // for($i = 0; $i < count($filesAccordionSettings); $i++){
    //     $objFileAccordionSettings[] = [(\FilesModel::findByUuid($filesAccordionSettings[$i]))->path, (\FilesModel::findByUuid($filesAccordionSettings[$i]))->extension];
    // }
    // for($i = 0; $i < count($filesGuiSettings); $i++){
    //     $objFileGuiSettings[] = [(\FilesModel::findByUuid($filesGuiSettings[$i]))->path, (\FilesModel::findByUuid($filesGuiSettings[$i]))->extension];
    // }
    // for($i = 0; $i < count($filesCameraSettings); $i++){
    //     $objFileCameraSettings[] = [(\FilesModel::findByUuid($filesAccordionSettings[$i]))->path, (\FilesModel::findByUuid($filesAccordionSettings[$i]))->extension];
    // }
    // for($i = 0; $i < count($filesGuiSettings); $i++){
    //     $objFileEnvironmentSettings[] = [(\FilesModel::findByUuid($filesGuiSettings[$i]))->path, (\FilesModel::findByUuid($filesGuiSettings[$i]))->extension];
    // }
    if (!function_exists('loadFiles')) {
        function loadFiles( $src){
            $returnArry = []; 
            if($src && count ($src)){
                for($i = 0; $i < count($src); $i++){
                    array_push($returnArry, [(\FilesModel::findByUuid($src[$i]))->path, (\FilesModel::findByUuid($src[$i]))->extension]);
                }
            }
            return $returnArry;
            
        }
    }
    $objFilePrefix = ""; 
    $objFile = loadFiles($files);
    $objFileMaterial = loadFiles($filesMaterial);
    if($objFileMaterial && count($objFileMaterial)){
        $objFileMaterialPrefix = basename($objFileMaterial[0][0], '.'.$objFileMaterial[0][1]).'_'; 
    }else if($objFile && count($objFile)){
        $objFilePrefix = basename($objFile[0][0], '.'.$objFile[0][1]).'_'; 
    }
    
    
    $objFileAccordionSettings = loadFiles($filesAccordionSettings);
    $objFileGuiSettings =loadFiles($filesGuiSettings);
    $objFileCameraSettings = loadFiles($filesCameraSettings);
    $objFileEnvironmentSettings = loadFiles($filesEnvironmentSettings);
    $objFileMarkerJson = loadFiles($filesMarkersSettings); 

    $otherSettings = [
        "buttonsGuiDefault",
        "backgroundColor",
        "sceneEnvironmentTextur", 
        "highlightOnClick",
        "highlightColor", 
        "toggleVisibilityList",
        "blackList", 
        "enableWebshop",
        "cameraFocus",
        "showOnlyMeshlist",
        "webshopStartPrice",
        "webshopButtonText",
        "rotationBehaviour",
        "environmentToCameraRotation"
    ];

    // $buttonsGuiDefault = true; 
    // $zoomSelectedMesh = false;
    // $activateMeshSelection = false;
    // $highlightColor = "new BABYLON.Color3(0.3,0.4,0.1)";
    // $backgroundColor = "new BABYLON.Color3(0.3,0.3,0.3)";
    // $toggleVisibilityList = "";
    // $blackList = "";
    // $sceneEnvironmentTextur = "";
    // $enableWebshop = false;
    // $webshopStartPrice = 0; 
    // $cameraFocus = "";
    // $showOnlyMeshlist  = ""; 
    // $materialPrefix = "";
    // $webshopButtonText = "";


    // converts "buttonsGuiDefault" to variable $buttonsGuiDefault
    for ($i = 0; $i < count($settings); $i++) {
        if (count($settings[$i]) && array_search($settings[$i][0], $otherSettings) !== false) {
            if(str_contains($settings[$i][0], 'Color') && $settings[$i][1]){
                ${$settings[$i][0]} = 'new BABYLON.Color3' . $settings[$i][1];
            }
            else if($settings[$i][1] === 'true' || $settings[$i][1] === 'false' || $settings[$i][1] === true || $settings[$i][1] === false){
                ${$settings[$i][0]} = filter_var($settings[$i][1], FILTER_VALIDATE_BOOLEAN);
            }else{
                ${$settings[$i][0]} = $settings[$i][1];
            }

            //  if ($settings[$i][0] == "highlightColor") {
            //     $highlightColor = 'new BABYLON.Color3' . $settings[$i][1];
            // } else if ($settings[$i][0] == "backgroundColor") {
            //     $backgroundColor = $settings[$i][1];
            // } else if ($settings[$i][0] == "highlightOnClick" && $settings[$i][1] == "true") {
            //     $activateMeshSelection = true;
            // } else if ($settings[$i][0] == " zoomSelectedMesh" && $settings[$i][1] == "true") {
            //     $zoomSelectedMesh = true;
            // }else if ($settings[$i][0] == "toggleVisibilityList") {
            //     $toggleVisibilityList = $settings[$i][1];
            // } else if ($settings[$i][0] == "enableGuiVisibility") {
            //     $enableGuiVisibility = filter_var($settings[$i][1], FILTER_VALIDATE_BOOLEAN);
            // }  else if ($settings[$i][0] == "enableWebshop") {
            //     $enableWebshop = filter_var($settings[$i][1], FILTER_VALIDATE_BOOLEAN) ;
            // } else if ($settings[$i][0] == "blackList") {
            //     $blackList = $settings[$i][1];
            // }else if ($settings[$i][0] == "sceneEnvironmentTextur") {
            //     $sceneEnvironmentTextur = $settings[$i][1];
            // }else if ($settings[$i][0] == "cameraFocus") {
            //     $cameraFocus = $settings[$i][1];
            // }else if($settings[$i][0] == "showOnlyMeshlist"){
            //     $showOnlyMeshlist = $settings[$i][1];
            // }else if($settings[$i][0] == "materialPrefix"){
            //     $materialPrefix = $settings[$i][1];
            // }else if($settings[$i][0] == "webshopStartPrice"){
            //     $webshopStartPrice = $settings[$i][1];
            // }else if($settings[$i][0] == "webshopButtonText"){
            //     $webshopButtonText = $settings[$i][1];
            // }
            
            
        }
    }

    $mainContainer = "#dc-babylon-js-viewer-container-".$this->id;
    ?>
    <div class="canvas-placeholder">
        <div id="<?=str_replace('#','',$mainContainer);?>" class="canvas-container">
            <canvas class="dc-canvas-3d" style="width:100%;height:100%;"   touch-action="none"></canvas>
        </div>
    </div>

    <script type="module">
        const jsPath = './bundles/contaobabylonjsviewer/js/duncrow-bjs-viewer.min.js'; 
        if(void 0===window.dcBabylonJsResolver||!window.dcBabylonJsResolver&&!window.dcBabylonJsResolver.isFulfilled()&&!window.dcBabylonJsResolver.isPending()){
            function MakeQuerablePromise(e){if(e.isFulfilled)return e;var n=!0,i=!1,r=!1,o=e.then(function(e){return r=!0,n=!1,e},function(e){throw i=!0,n=!1,e});return o.isFulfilled=function(){return r},o.isPending=function(){return n},o.isRejected=function(){return i},o}var checkpromise=import(jsPath).then(e=>{let n=new e.DCBabylonJsViewer;return n.loadingFinished=(e=>{}),n.loadingStarted=(e=>{}),window.addEventListener("click",function(e){e.target.className.toString().includes("dc-selected")||e.target.className.toString().includes("dc-scroll-container")||Array.from(document.querySelectorAll(".dc-scroll-container")).forEach(e=>e.classList.add("hidden"))}),n});window.dcBabylonJsResolver=MakeQuerablePromise(checkpromise)}
    </script>

    <script type="module">

        window.dcBabylonJsResolver.then((viewer) => {
            const mainContainer = document.querySelector('<?=$mainContainer;?>');
            let dcbjsGui;
            let scene; 
            let webshopBasketButtonCanvas; 
            let priceContainer; 
            let accordionJson = ""; 
            let guiJson = ""; 
            
            /**
             * init Variables
             */
            let highlightcolor = new BABYLON.Color3(0.4,0.2,0.6); 
            
            <?php if (count($objFileCameraSettings)){
                ?>
                let cameraSettings = "<?= $objFileCameraSettings[0][0] ?>"; 
            <?php  } else { ?>
                let cameraSettings = {
                    <?php /** $rotationBehaviour ==  'rotate-none' 'rotate-auto' 'rotate-once' */
                    if(!isset($rotationBehaviour)){
                        ?> useAutoRotationBehavior : true, <?php 
                    }
                    else{
                        if(isset($rotationBehaviour) && $rotationBehaviour == 'rotate-auto'){
                            ?> useAutoRotationBehavior : true, <?php 
                        }
                        if(isset($rotationBehaviour) && $rotationBehaviour == 'rotate-none'){
                            ?> useAutoRotationBehavior : false, <?php 
                        }
                        if(isset($rotationBehaviour) && $rotationBehaviour == 'rotate-once'){
                            ?>  
                            zoomStopsAnimation : true,
                             <?php 
                        }
                    }
                    ?>
                    rotationSpeed:0.2,
                    minZ: 0.01,
                    maxZ: 10000,
                    minZoom: 0.5,
                    maxZoom: 1.5
                }; 
            <?php  }  ?>    
            <?php if (count($objFileEnvironmentSettings)){
                ?>
                let environmentSettings = "<?= $objFileEnvironmentSettings[0][0] ?>"; 
            <?php  }else{ ?>
                let environmentSettings = {
                    backgroundColor : new BABYLON.Color4(0.9529, 0.9529, 0.9529,1),
                    createGround : false,
                    createSkybox : false,
                    <?php /** $rotationBehaviour ==  'rotate-none' 'rotate-auto' 'rotate-once' */
                    if(isset($environmentToCameraRotation)){
                        if($environmentToCameraRotation){
                            ?> cameraRotateEnvironment : true, <?php 
                        }
                    }
                    ?>
                    
                }
            <?php }  ?>

            
            /**
             * init Functions
             */
            function meshClicked(parameters) {
                console.log('parameters: ', parameters); 
                if(dcbjsGui){
                    dcbjsGui.hideButtons('mouseIconRotate'); 
                    <?php 
                    if(isset($rotationBehaviour) && $rotationBehaviour == 'rotate-once'){
                        ?> 
                        if(scene && typeof scene.camera !== 'undefined'){
                            scene.camera.camera.useAutoRotationBehavior = false;

                            // scene.camera.camera.autoRotationBehavior.zoomStopsAnimation = true; 
                            scene.camera.camera.useFramingBehavior = false; 
                            // scene.camera.camera.framingBehavior.zoomStopsAnimation = true; 
                         } <?php 
                    }
                    ?>
                    dcbjsGui.showButtons('info'); 
                }
            }
            function clickedGui(parameters) {
                console.log('GUI CLick: ', parameters, scene); 
				if(dcbjsGui){
					dcbjsGui.resetAccordion();
				}
                if(parameters.type == 'material'){
                    scene.changeMaterial(parameters.id.split(','), "<?= ($objFileMaterialPrefix)?$objFileMaterialPrefix:$objFilePrefix ?>"+parameters.value); 
                }
                if(parameters.type == 'toggle'){
                    if(parameters.value == 'hidden'){
                        toggle(parameters, false); 
                    }else{
                        toggle(parameters, true); 
                    }
                    
                }
                // if(parameters.type == 'button' && parameters.value == 'fullscreen'){
                //     if(!scene.isFullscreen){
                //         viewer.openModal(scene,'fullscreen','',false);
                //     }else{
                //         viewer.closeModal(); 
                //     }
                // }
                if(parameters.type == 'button' && parameters.value == 'screenshot'){
                    if(typeof dcbjsGui === 'undefined' || !dcbjsGui){
                        viewer.openModal(scene,'screenshot',null , '',true, true); 
                    }else{
                        if(!dcbjsGui.isFullscreen()){
                            viewer.openModal(scene,'screenshot',null , '',true, true); 
                        }else{
                            viewer.openModal(scene,'screenshot',scene.sceneContainer, '',false, true); 
                        }
                    }
                    
                }
                if(parameters.type == 'button' && parameters.value == 'info' && typeof dcbjsGui !== 'undefined'){
                    dcbjsGui.showButtons('mouseIconRotate'); 
                    dcbjsGui.hideButtons('info'); 
                }
                if(parameters.type == 'button' && parameters.value == 'camera-reset'){
                    scene.camera.resetCamera(); 
                }
                if(parameters.type == 'button' && (parameters.value == 'menu' || parameters.value == 'menu-mobile')){
                    toggleMenuEvent(!dcbjsGui.isNaviagtionHidden); 
                }
                if(parameters.type == 'switchObject'){
                    scene.showOnlyMesh(parameters.value); 
                }
                // scene.camera.zoomOnMeshes(); 

                <?php if($enableWebshop){ ?>
                    let defaultPrice = <?= $webshopStartPrice ?>; 
                    let prices = mainContainer.querySelectorAll('.dc-accordion-material-item.active .dc-price'); 
                    prices.forEach(price => {
                        defaultPrice = Number(defaultPrice) + Number(price.innerHTML); 
                    });
                    console.log('price: ', defaultPrice); 
                    priceContainer.innerHTML = defaultPrice; 

                <?php } ?>
            }
            function toggle(parameters, overriteIsVisible = null){
                let isVisible = scene.toggleMeshVisibility(parameters.id.split(','), overriteIsVisible); 
                    // dcbjsGui.toggle(parameters.id, !isVisible ); 

                    if(isVisible){
                        scene.changeInfoMarkerImageSpritePosition(parameters.id, 1); 
                    }else{
                        scene.changeInfoMarkerImageSpritePosition(parameters.id, 3); 
                    }
            }
            function markerClicked(parameters) {
                console.log('Marker Clicked: ', parameters); 
                
                if(dcbjsGui && parameters.type == 'toggleMarkers'){
                    toggle(parameters); 
                    dcbjsGui.toggle(parameters.id);      
                }else{
                    dcbjsGui.toggleAccordionActive('',parameters.id); 
                    toggleMenuEvent(!dcbjsGui.isNaviagtionHidden); 
                }
            }
            function accordionCreationFinisehd(gui) {
                dcbjsGui.hideButtons('info'); 

                if(accordionJson && gui && typeof gui.accordion !== 'undefined'){
                    let accordionMainContainer = gui.accordion.accordionMainContainer.element; 
                    accordionMainContainer.style.transform = 'translate(-10000px,-10000px)'; 
                    accordionMainContainer.style.width = accordionMainContainer.offsetWidth; 

                    
                    let parent = accordionMainContainer.parentNode;
                    let body = document.querySelector('body'); 
                    body.prepend(accordionMainContainer); 
                    setTimeout(() => {
                        gui.resetAccordion();
                        setTimeout(() => {
                            parent.prepend(accordionMainContainer);
                            accordionMainContainer.style.transform = null; 
                            accordionMainContainer.style.width = null; 
                        
                        }, 5);
                    }, 5);
                }
                
            }
            function toggleMenuEvent(mobileSwitchIsHidden) {
                console.log('mobile switch', mobileSwitchIsHidden); 
                if(accordionJson){
                    if(mobileSwitchIsHidden){
                        scene.canvas.classList.add('width-66');
                    }else{
                        scene.canvas.classList.remove('width-66');
                    }
                }
                viewer.resize(); 
            }; 
            
            /**
             * init Scene
             */
            
            let loadAssetPaths = [<?php for($i = 0; $i < count($objFileMaterial); $i++){ echo "'".$objFileMaterial[$i][0]."',"; } ?> <?php for($i = 0; $i < count($objFile); $i++){ echo "'".$objFile[$i][0]."',"; } ?> ];
            scene = viewer.addScene(mainContainer.querySelector('.dc-canvas-3d'), "<?=$mainContainer?>",".canvas-placeholder" ,loadAssetPaths,cameraSettings,environmentSettings, {callback: meshClicked, selectionOutlineColor: highlightcolor,zoomSelectedMesh:false }, <?=(($sceneEnvironmentTextur)?"'".$sceneEnvironmentTextur."'":'')?>); 
            
            <?php if($backgroundColor){ ?>
                scene.overwriteBackgroundColor =<?= $backgroundColor; ?>; 
            <?php }?>
            // viewer.switchViewModusToSingle(scene.canvas);
            // scene.loadSceneFiles(); 
            scene.sceneReady.then(()=>{
                scene.loadSceneFiles(); 
            });
            // viewer.loadScene(scene); 
            

            scene.loadingFinished.then(() => {
                viewer.loadScene(scene);
                scene.changeGlassMaterial(); 
                var blackListArray = ["<?=$objFileMaterialPrefix ?>"];
                scene.blacklist = [...new Set([...blackListArray])];

                // scene.camera.zoomOnMeshes(); 

                <?php if( $showOnlyMeshlist){ ?>
                    var showOnlyMeshListString = "<?= $showOnlyMeshlist ?>";
                    var showOnlyMeshListArray = showOnlyMeshListString.split(',');
                    if(showOnlyMeshListArray.length){
                        scene.showOnlyMesh(showOnlyMeshListArray); 
                    }
                    
                <?php } ?>

                <?php if( $blackList){ ?>
                    var blackListString = "<?= $blackList ?>";
                    var blackListArray = blackListString.split(',');
                    blackListArray.forEach(meshName =>{
                        scene.scene.meshes.forEach(mesh =>{
                            if(mesh.id.includes(meshName)){
                                mesh.isVisible = false;
                            }
                        })
                    })
                    scene.blacklist = [...new Set([...blackListArray,...["__root__"]])];
                    <?php } ?>
                    <?php 
                    
                    // $objFileMaterialPrefix
                    //for($i = 0; $i < count($objFileMaterial); $i++){ echo "'".$objFileMaterial[$i][0]."',"; } ?>
                    <?php if( $objFileMaterialPrefix){ ?>
                    // var blackListArray = ["<?=$objFileMaterialPrefix ?>"];
                    // blackListArray.forEach(meshName =>{
                    //     scene.scene.meshes.forEach(mesh =>{
                    //         if(mesh.id.includes(meshName)){
                    //             mesh.isVisible = false;
                    //         }
                    //     })
                    // })
                    // var blackListArray = ["<?=$objFileMaterialPrefix ?>"];
                    // scene.blacklist = [...new Set([...blackListArray,...["__root__"]])];
                    <?php } 
                    
                    ?>


                    <?php if( $toggleVisibilityList){ ?>
                    var whiteListString = "<?= $toggleVisibilityList ?>";
                    var whiteListArray = whiteListString.split(',');
                    scene.whitelist = [...new Set([...whiteListArray,...["__root__"]])];
                    <?php } ?>

                    
                <?php if(count($objFileMarkerJson)){ ?>
                    scene.loadMarkersJson("<?= $objFileMarkerJson[0][0] ?>", markerClicked); 
                <?php } ?>
                
                
                <?php if(count($objFileAccordionSettings)){?> 
                    accordionJson = "<?= $objFileAccordionSettings[0][0] ?>";
                <?php }
                if(count($objFileGuiSettings)) { ?> 
                    guiJson = "<?= $objFileGuiSettings[0][0] ?>";
                <?php  } ?>

                /*
                <?php var_export( $buttonsGuiDefault); ?>
                */
                let useDefaultGui = "<?= $buttonsGuiDefault?"true":"" ?>";
                let guiJsonDefault = null; 
                if(!guiJson && useDefaultGui){
                    guiJsonDefault = {
                    "buttonsPosition":{
                        "leftTop":["share","screenshot","cameraReset", "info"],
                        "rightTop":["fullscreen","menu"],
                        "centerBottom":["mouseIconRotate"]
                    },
                    "accordionPosition":{
                        "tap":["menuMobile"],
                        "centerTop":[ "mouseIconRotate"]
                    }
                }
                }
                
                guiJson = (guiJson)?guiJson:guiJsonDefault; 
                if(accordionJson || guiJson){
                    let containerId = scene.sceneContainer; 
                    console.log(guiJson);
                    dcbjsGui = new DCGui(containerId,accordionJson, guiJson, 'de',0,1, clickedGui, accordionCreationFinisehd); 
                    if(accordionJson){
                        scene.canvas.classList.add('width-66');
                    }
                }
                
                
            });

            
            <?php if($enableWebshop){ ?>
                let price = <?= $webshopStartPrice ?>; 
                let webshopCanvas = document.createElement('div');
                webshopCanvas.className = "dc-webshop-container";
                priceContainer = document.createElement('div');
                webshopCanvas.append(priceContainer); 
                priceContainer.className = "dc-webshop-price"; 
                priceContainer.innerHTML = price; 

                mainContainer.append(webshopCanvas); 
                mainContainer.classList.add('dc-webshop'); 

                webshopBasketButtonCanvas = document.createElement('div');
                webshopBasketButtonCanvas.className = "dc-webshop-basket-button"; 
                webshopBasketButtonCanvas.innerHTML = "<?= ($webshopButtonText)?$webshopButtonText:"In den Einkaufswagen"; ?>"; 
                webshopCanvas.append(webshopBasketButtonCanvas); 
  <?php 
            
            }?>
        });

    </script>

<?php } ?>


